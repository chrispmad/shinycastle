% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/secure-app-castle.R
\name{secure-app-castle}
\alias{secure-app-castle}
\alias{secure_app_castle}
\title{Secure a Shiny application with Castle log-in and manage authentication}
\usage{
secure_app_castle(
  ui,
  ...,
  enable_admin = FALSE,
  head_auth = NULL,
  theme = NULL,
  language = "en",
  fab_position = "bottom-right"
)
}
\arguments{
\item{ui}{UI of the application.}

\item{...}{Arguments passed to \code{\link{auth_ui}}.}

\item{enable_admin}{Enable or not access to admin mode, note that
admin mode is only available when using SQLite backend for credentials.}

\item{head_auth}{Tag or list of tags to use in the \code{<head>}
of the authentication page (for custom CSS for example).}

\item{theme}{Alternative Bootstrap stylesheet, default is to use \code{readable},
you can use themes provided by \code{shinythemes}.
It will affect the authentication panel and the admin page.}

\item{language}{Language to use for labels, supported values are : "en", "fr", "pt-BR", "es", "de", "pl", "ja", "el", "id", "zh-CN".}

\item{fab_position}{Position for the FAB button, see \code{\link{fab_button}} for options.}
}
\value{
A \code{reactiveValues} containing informations about the user connected.
}
\description{
Secure a Shiny application with Castle log-in and manage authentication
}
\note{
A special input value will be accessible server-side with \code{input$shinymanager_where}
 to know in which step user is : authentication, application, admin or password.
}
\examples{
if (interactive()) {
  
  # define some credentials
  credentials <- data.frame(
    user = c("a", "shinymanager"),
    password = c("b", "12345"),
    stringsAsFactors = FALSE
  )
  
  library(shiny)
  library(shinymanager)
  
  ui <- fluidPage(
    tags$h2("My secure application"),
    verbatimTextOutput("auth_output")
  )
  
  # Wrap your UI with secure_app
  ui <- secure_app_custom(ui, choose_language = TRUE)
  
  # change auth ui background ?
  # ui <- secure_app(ui,
  #                  background  = "linear-gradient(rgba(0, 0, 255, 0.5), 
  #                  rgba(255, 255, 0, 0.5)),
  #                  url('https://www.r-project.org/logo/Rlogo.png')  no-repeat center fixed;")
  
  server <- function(input, output, session) {
    
    # call the server part
    # check_credentials returns a function to authenticate users
    res_auth <- secure_server_custom(
      check_credentials = check_credentials(credentials)
    )
    
    output$auth_output <- renderPrint({
      reactiveValuesToList(res_auth)
    })
    
    observe({
      print(input$shinymanager_where)
      print(input$shinymanager_language)
    })
    
    # your classic server logic
    
  }
  
  shinyApp(ui, server)
  
}
}
